package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.RequestDispatcher;
import javax.sql.DataSource;

import com.oreilly.servlet.MultipartRequest;

import dto.ProductVO;

public class ProductDAO {
	private static ProductDAO instance = new ProductDAO();
	
	private ProductDAO() {
		
	}
	
	public static ProductDAO getInstance() {
		return instance;
	}
	
	// 데이터베이스 커넥션풀 연결
	public Connection getConnection() {
		Connection conn = null;
		Context initContext = null;
		Context envContext = null;
		DataSource ds = null;
		
		try {
			initContext = new InitialContext();
			envContext = (Context) initContext.lookup("java:/comp/env");
			ds = (DataSource) envContext.lookup("jdbc/myoracle");
			conn = ds.getConnection();
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		return conn;
	}
	
	public int registerProduct(MultipartRequest multi) throws SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "insert into product values(product_seq.nextval, ?, ?, ?, ?, ?, ?)";
		int result = -1;
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			
			String product_name = multi.getParameter("product_name");
			String product_price = multi.getParameter("product_price");
			String product_content = multi.getParameter("product_content");
			String product_sex_category = multi.getParameter("product_sex_category");
			String product_level_category = multi.getParameter("product_level_category");
			String product_image = multi.getFilesystemName("product_image");
			
			System.out.println("product_image : " + product_image);
			
			pstmt.setString(1, product_name);
			pstmt.setString(2, product_price);
			pstmt.setString(3, product_content);
			pstmt.setString(4, product_sex_category);
			pstmt.setString(5, product_level_category);
			pstmt.setString(6, product_image);
			
			result = pstmt.executeUpdate();
			
			return result;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if(pstmt != null) pstmt.close();
			if(conn != null) conn.close();
		}
		
		return result;
	}
	
	public ArrayList<ProductVO> getAllProducts() throws SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		String sql = "select * from product order by product_number desc";
		ArrayList<ProductVO> list = new ArrayList<ProductVO>();
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			while(rs.next()){
				ProductVO pVo = new ProductVO();
				
				pVo.setProductNumber(rs.getInt("product_number"));
				pVo.setProductName(rs.getString("product_name"));
				pVo.setProductPrice(rs.getInt("product_price"));
				pVo.setProductContent(rs.getString("product_content"));
				pVo.setProductSexCategory(rs.getString("product_sex_category"));
				pVo.setProductLevelCategory(rs.getString("product_level_category"));
				pVo.setProductImage(rs.getString("product_image"));
				
				list.add(pVo);
			}
			
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) rs.close();
			if(pstmt != null) pstmt.close();
			if(conn != null) conn.close();
		}
		
		return list;
	}

	public ProductVO selectByProductNumber(String product_number) throws SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		ProductVO pVo = null;
		
		String sql = "select * from product where product_number = ?";
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, product_number);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				pVo = new ProductVO();
				
				pVo.setProductNumber(rs.getInt("product_number"));
				pVo.setProductName(rs.getString("product_name"));
				pVo.setProductPrice(rs.getInt("product_price"));
				pVo.setProductContent(rs.getString("product_content"));
				pVo.setProductSexCategory(rs.getString("product_sex_category"));
				pVo.setProductLevelCategory(rs.getString("product_level_category"));
				pVo.setProductImage(rs.getString("product_image"));
				
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) rs.close();
			if(pstmt != null) pstmt.close();
			if(conn != null) conn.close();
		}
		
		return pVo;
	}
	
	public void deleteProduct(String product_number) throws SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		
		String sql = "delete product where product_number = ?";
		
		try {
			conn = getConnection();
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, product_number);
			pstmt.executeQuery();	
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(pstmt != null) pstmt.close();
			if(conn != null) conn.close();
		}
	}

	public int updateProduct(MultipartRequest multi) throws SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		
		int result = -1;
		
		String sql = "update product set product_name=?, "
				+ "product_price=?, "
				+ "product_content=?, "
				+ "product_sex_category=?, "
				+ "product_level_category=?,"
				+ "product_image=? where product_number=?";
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			
			String product_name = multi.getParameter("product_name");
			String product_price = multi.getParameter("product_price");
			String product_content = multi.getParameter("product_content");
			String product_sex_category = multi.getParameter("product_sex_category");
			String product_level_category = multi.getParameter("product_level_category");
			String product_image = multi.getFilesystemName("product_image");
			String product_number = multi.getParameter("product_number");
			
			System.out.println("상품명 : " + product_name);
			System.out.println("상품번호: ");
			pstmt.setString(1, product_name);
			pstmt.setString(2, product_price);
			pstmt.setString(3, product_content);
			pstmt.setString(4, product_sex_category);
			pstmt.setString(5, product_level_category);
			pstmt.setString(6, product_image);
			pstmt.setString(7, product_number);
			
		    result = pstmt.executeUpdate();
		} catch(Exception e) {
			e.printStackTrace();
		} finally{
			if(pstmt != null) pstmt.close();
			if(conn != null) conn.close();
		}
		
		return result;
	}
	
	public ArrayList<ProductVO> getProductBySexCategory(String category) throws SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		ArrayList<ProductVO> list = null;
		
		String sql = "select * from product where product_sex_category=?";
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, category);
			rs = pstmt.executeQuery();
			
			list = new ArrayList<ProductVO>();
			while(rs.next()) {
				ProductVO pVo = new ProductVO();
				
				pVo.setProductNumber(rs.getInt("product_number"));
				pVo.setProductName(rs.getString("product_name"));
				pVo.setProductPrice(rs.getInt("product_price"));
				pVo.setProductSexCategory(rs.getString("product_sex_category"));
				pVo.setProductLevelCategory(rs.getString("product_level_category"));
				pVo.setProductImage(rs.getString("product_image"));
				
				list.add(pVo);
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) rs.close();
			if(pstmt != null) pstmt.close();
			if(conn != null) conn.close();
		}
		
		return list;
	}
}