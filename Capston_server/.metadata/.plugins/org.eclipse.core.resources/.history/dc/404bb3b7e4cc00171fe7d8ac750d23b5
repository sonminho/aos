package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import dto.MemberVO;
import util.DBManager;

public class MemberDAO {
	private MemberDAO() {
		
	}
	
	private static MemberDAO instance = new MemberDAO();
	
	public static MemberDAO getInstance() {
		return instance;
	}
	
	
	public int confirmID(String userid) {
		int result = -1;
		String sql = "select userid from member_info where "
				+ "userid = ?";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userid);
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				result = 1;
			} else {
				result = -1;
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if(rs != null) rs.close();
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		
		return result;
	}
	
	// 1이면 회원 추가 성공 -1이면 실패
	public int insertMember(MemberVO mVo) {
		String sql = "insert into member_info(token, userid, pwd, email, phone)"
				+ " values(?, ?, ?, ?, ?)";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		int result = -1;
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, mVo.getToken());
			pstmt.setString(2, mVo.getUserid());
			pstmt.setString(3, mVo.getPwd());
			pstmt.setString(4, mVo.getEmail());
			pstmt.setString(5, mVo.getPhone());
			
			result = pstmt.executeUpdate();
			
			return result;
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try{
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return result;
	}
	
	// 1이면 회원 정보 있음 -1이면 정보없음
	public int loginMember(MemberVO mVo) {
		int result = -1;
		
		String sql = "select * from member_info " +
				"where token=? AND userid=? AND pwd=?";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, mVo.getToken());
			pstmt.setString(2, mVo.getUserid());
			pstmt.setString(3, mVo.getPwd());
			
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				result = 1;
			} else {
				result = -1;
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if(rs != null) rs.close();
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		
		return result;
	}
	
	public int webLoginMember(MemberVO mVo) {
		int result = -1;
		
		String sql = "select * from member_info " +
				"where userid=? AND pwd=?";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, mVo.getUserid());
			pstmt.setString(2, mVo.getPwd());
			
			rs = pstmt.executeQuery();
			
			// 계정 일치
			if(rs.next()) {
				result = 1;
				
				System.out.println(rs.getString("token"));
			} else {
				result = -1;
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if(rs != null) rs.close();
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		
		return result;
	}
	
	public MemberVO getMember(String userid) {
		MemberVO mVo = null;
		
		String sql = "select * from member_info where userid = ?";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userid);
			rs = pstmt.executeQuery();
			
			// 해당 아이디가 존재하면
			if(rs.next()) {
				mVo = new MemberVO();
				// 사용자의 정보를 빈에 담아서 리턴
				mVo.setUserid(rs.getString("userid"));
				mVo.setToken(rs.getString("token"));
				mVo.setPhone(rs.getString("phone"));
				mVo.setEmail(rs.getString("email"));		
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		return mVo;
	}
}
